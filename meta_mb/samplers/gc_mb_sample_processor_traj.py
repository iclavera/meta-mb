from meta_mb.samplers.base import SampleProcessorfrom meta_mb.utils import utilsfrom meta_mb.logger import loggerimport numpy as npclass ModelSampleProcessor(SampleProcessor):    def __init__(            self,            reward_fn,            achieved_goal_fn,            replay_k,            baseline=None,            discount=0.99,            gae_lambda=1,            normalize_adv=False,            positive_adv=False,    ):        self.reward_fn = reward_fn        self.achieved_goal_fn = achieved_goal_fn        self.replay_k = replay_k        self.baseline = baseline        self.discount = discount        self.gae_lambda = gae_lambda        self.normalize_adv = normalize_adv        self.positive_adv = positive_adv    def process_samples(self, paths, eval, log, log_prefix=''):        """        Processes sampled paths. This involves:            - computing discounted rewards (returns)            - fitting baseline estimator using the path returns and predicting the return baselines            - estimating the advantages using GAE (+ advantage normalization id desired)            - stacking the path data            - logging statistics of the paths        Args:            paths_meta_batch (dict): A list of dict of lists, size: [meta_batch_size] x (batch_size) x [5] x (max_path_length)            log (str): indicates whether to log            log_prefix (str): prefix for the logging keys        Returns:            (list of dicts) : Processed sample data among the meta-batch; size: [meta_batch_size] x [7] x (batch_size x max_path_length)        """        returns = np.asarray([utils.discount_cumsum(path["rewards"], self.discount)[0] for path in paths])        goals = np.asarray([path['goals'][0] for path in paths])        samples_data = dict(            goals=goals,            returns=returns,            # observations=0,            # next_observations=0,            # actions=0,            # rewards=0,            # dones=0,            # advantages=0, # FIXME: Hack for SVG            # time_steps=0,            # env_infos=0,            # agent_infos=0,        )        return samples_data